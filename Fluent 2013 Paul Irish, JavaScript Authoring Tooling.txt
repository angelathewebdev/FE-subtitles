去年我来这里讲过
alright, last year I was actually on this stage and I gave a little talk

等下我直接播放好叻
I'm just gonna play quick excerpts of of that right now

我讲的下一个话题是关于Web开发工作流程
I talked about web development workflow

我认为这两年有很多新的工具
because I think over the past two years in particular there's been a lot of tools that

可以加快开发者的工作流程
we've got in as developers to increase our productivity, reduce our stress

如何把他们融合在一起是一个有趣的挑战
putting them together in kind of a work flow that make sense has been an interesting challenge

所以我来谈谈我还有其他人是如何做的
so I'm gonna walk through what my approaches has been and some of the approaches

先说一下
I've seen other developers doing uh... first thing I should point out

(这句话我不翻译啦)
please try and pay no attention to the enormous rhinoceros genetalia behind me

大家不要为了它而分心哟
it is distracting, it is very distracting

不管怎样, 去年我谈了2013 JS开发工作流程
but anyway so yes last year I talked about the Javascript workflow of  2013

我觉得应该回顾一下
um... so I've figured it would be kind of good to revisit that now that it's 2013

毕竟现在就是2013
so this is the javascript authoring workflow of now um...yeah

再上一段视频嘞 (开播了)
a few things I touched on last year uh... just quick little excerpts things here and there

我认为有实时的反馈很重要
so I think having realtime feedback is an important thing

比如实时更新, 还有实时编译等
live recompilation and live reload now massages here

你看这里, 编译后的Sass 然后我们谈谈source maps
the sass final, the next is source maps

(okay, 大家回神了)
okay just quick little

去年演讲中提到的这几个流行词
bits and bobs of technologies um... buzz words but all useful things

有大概谈谈他们是怎么结合在一起
and last year I kind of showed kind of putting these together kind of disparate technologies to kind of come into a workflow that kind of works together

之后我们Chrome 开发者工具团队就一直在想如何
but on the chrome DevTools team we've been thinking about this and

把他们更好的融入到开发者工具里面
figured out how we can make this into a more cohesive workflow

今天就来展示一下成果
and I wanna show you some of the features uh...that have come out of that work

第一个是Workspaces
the first up is called workspaces

噢噢 等下个...
um... but um...uh... this is embarrassing uh...

让我修修
so just bear with me I'm gonna fix this now

(哼歌中...)
just dadan da

让我把这个干掉, 然后去我的编辑器
just kill this actually I'm gonna come to my editor

把新的样式放在这里
let's make some room for that so that

哒哒哒...不需要这个width
we can put in some new styles uh... I don't need this width

然后关掉这个box-shadow
that should fix that I can turn off this box shadow

加个line-height, 这样就差不多了
Get a line height, that looks about right-ish

再来个font-size
and font size

酱紫, 来到我的编辑器
alright, let's bring these changes over to my editor

所有改动立刻浮现哈
change on disk reload

好赞
sure sure, oh oh, all right as you can see here nice

开发者工具帮我自动加载
DevTools is doing this work for me so I'm making changes in the styles panel

到磁盘上
it's going to bring these back to disk

比如我在Sublime上面添加一些东东
so let's say I actually wanna add something back over here inside sublime

来个text-shadow: 1px 1px 10px white
and let's see we'll do 1px 1px 10px and white

保存内容然后...锵锵
um... just hit save and come over here, yeah, 

看起来不错哦, 但是我觉得黑色会更好一点
that's that's looks pretty pretty good, but I'm gonna go with black instead

嗯嗯好帅呢
yes that's sharp okay cool

样式解决...然后
styles are looking good but we still have

等个下
Whoops um...

现在的内容在用Markdown
so this is a HTML slide deck but I'm using markdown for the contents

打开这个markdown 先按Command + O
so let's edit the markdown I'm gonna hit the Command + O

打开slides.md
and it bring up slides.md

然后把这个O改成小写的
and uh... here is that typo just change that to lowercase

按Command + S保存 刷新
and hit Command + S to save and refresh

看起来不错, 这个就是workspaces
looking good... cool nice so this is workspaces

它让我把系统上的文件夹带到开发者工具中
workspaces allows me to bring in folders on my system into the dev tools and edit it

开发者工具自动绑定
what the dev tool is going to do is map this to what's coming over the wire

这样我就可以有个后台提供内容
so I can make full backend and serving up this content

开发者工具就能把这些文件
DevTools is going to map the resources so that

更改直接更新到硬盘上
when I make changes to things on screen it's gonna be able to make these changes to what's persistent on disk as well

这样我可以编辑任何东西, 比如这个Markdown
I can edit everything this is you know this is mark down here

开发者工具直接利用C++绑定更新
the dev tool team itself actually edit the c++ bindings for dev tool inside of dev tools

直接可以更新这些样式
style changes as they make them over here in the styles panel they persist

而且所有更改都保存在磁盘上
all these changes are kept on persistent disk I can edit anywhere

撤销重做神马的毫无鸭梨
full undo redo, especially here

这样超赞的 不仅仅可以保存原来的样子
uh... man this is great because I'm able to maintain my context and not keep

而且不需要一直切换 直接一个地方全部做掉
switching between two separate things just do it all in one place

好 下一个
uh...all right, next thing up

Sass在去年的大会上有提到
sass this was something that I mentioned last year

之后就一直有很多人问我怎么样了
and a lot of people have been asking about this

今天就更新一下Sass在开发者工具里面怎么运作
I want to bring you up-to-date with how this works inside of DevTools now

让我打开HTML5 Please
alright to do this I would bring up a version of HTML5 please

这样就不错
and this is looking good

比如我想修改一下这个
but I wanna actually try experimenting with this guy right here

"使用"徽章
this little use badge

让我打开开发者工具
so uh... open up the DevTools

然后来修改一下这个徽章的颜色
you know what I'm gonna try to change the color of it

okay 从这里你能看到
all right so here we are that's good

"使用"徽章有个background box-shadow和border-right
the uh... uses got a background box-shadow and border-right

颜色是绿色的然后深绿
green and getting a little getting darker in the greens as it goes down

让我来换一个颜色
so if we want to try to change the color

最近比较喜欢紫蓝 说不清楚为什么
I'm really keen on indigo lately uh... I don't know why, it's cool

嗯 看起来不怎么样
but that really don't work out well so hot

Command + Z撤销
hmm...Command + Z

这样不错
good yes uh...

点击CSS看看
so if I click through the actual style on CSS

对Sass比较熟的会发现在样式版里面就是
those of you are SASSies will notice this looks like

编译后非压缩的CSS
compiled uncompressed CSS coming from the styles panel compiler

但是我应该可以直接修改Sass的对吧
so what I should really be doing is authoring in SASS

那么我们来开发者工具
so let's turn that on

设置这里
we go the DevTools setting

打开Experiments选择Sass stylesheet debugging
and bring up experiments and turn on Sass

刷新页面
cool, refresh the page

再次打开开发者工具
bring back up the DevTools

回到刚刚的地方
and go back to my selection

第一件事情就是这些属性的右边
now the first thing that you're gonna notice is pretty small

不是平常的CSS文件, 而是Sass源文件
is that here against the usual you're seeing the location in the sass file where this is coming from

那我点击进去
so Imma click through on that

这里是我们的Sass文件
all right cool so here we are in my Sass file

看起来这里我们有用一个混入
and uh... looks like use is actually using a mixin

我们需要改变颜色
uh... but I wanted to change that color

继续往里看
so we're gonna have to dig a little bit deeper

所以我们回到刚刚的地方 按下Command
so I come back over here and I hit Command and

你会注意到这些规则现在都可以点击了
you can now see that these things are a little clickable

那么我按下Command点击background
so I'm gonna Command + click on background

我们就跳转到混入定义的页面
and we jump into the extends file where our mixins are defined

background box-shadow border-right什么的颜色都是从这里来
background box-shadow border-right and yeap the color that's coming in

这里也可以看见颜色被加深了
right here is in fact is being darkened as it comes down

但是因为$color并不是在这里定义的
all right that makes sense but again I need to change that color

我们回到Elements Command点击颜色
and I come back to elements and Command click on the color itself

带我们跳转到_vars.scss文件
all right so now we are over here in our _vars.scss file

而且光标直接放在这个函数上
and the cursor is placed immediately where this variable was defined

"使用"的颜色在这里 用的是那个绿色
so the use one is right here and this is that green and um...

把它改成紫蓝 Command + S保存
uh... so i want to try it as being indigo, Command + S

不错
yeah...nice

但是还是那个绿色好看
it's pretty good but honestly that green color worked the best

Command + Z撤销
so just Command + Z to back my way to that green

刚刚这些都是没有使用Chrome插件
cool, all right so this is done with no chrome extensions at all

全部都是开发者工具在做
so this is just straight up DevTools

唯一的一个东西支持就是
in fact the only thing that I have going on in addition to uh... the Sass support and workspaces

背后的Sass进程在守望这些更改
is I do have a Sass watch daemon just watching these things

然后实时编译
and recompile in on-the-fly

其中是由开发者工具来更新这些改变
but DevTools is doing the work of bringing in the new changes as they come in

这样Sass就有完整的追踪性
so we have full traceability from my css

包括函数 属性 选择器都可以追踪到他们的原始Sass
the selectors, properties, and variables back to the original Sass sources

不管是从混入还是函数创建的
whether came from a mixin or a variable or whatever

这些都使用source maps
this is actually enabled by source maps I talked about it last year

去年提到source maps 它们就是Javascript
source maps are javascript

基本上这就是CSS的source maps
this is the same technology just for css

这项技术是由我们开发者工具团队出的
uh... and this was contributed to the Sass compiler core by the DevTools team

我也应该提一下 如果你喜欢用Stylus或者Less
and I should mention that um... if you're not sass user and you like stylus or less

技术上来说没有任何困难
uh... the limitations are completely agnostic

只要他们开始支持source maps
so once less or stylus gets support to create the source maps

就可以跟Sass一样运作
it's gonna work the exact same way

这样样式表的改动都会重写加载
and a full automatic reload of the stylesheet as changes coming

这些功能加在一起能突飞猛增
pretty nice so these changes combined really change things up

开发者工具可以变成我的编辑器 我认为这可以变成非常的强大
DevTools can become my editor uh... I think it's really powerful 

我更新的时候都能实时反馈
cuz I'm getting this real time feedback as I'm typing as I'm making changes

使用workspaces 改CSS或者Sass都能看到最后的改变
I see the style changes as I type them out whether in CSS or Sass is persistent to disk by way of uh... workspaces

如果我再修改Javascript的时候我可以看到它立刻执行
if I'm doing javascript I can edit that and it's re-evaluated on-the-fly

打包送到V8 剩下的都自动运行
it's patched up to send to V8 and it just takes care of it

(这句话真心没听懂..主要就是那个camus)
great when you're doing any sort of campus work ?

同时如果你需要修改代码的时候
uh... in this also cool because when you author code

你发现需要调试你可以直接插入断点
and you seem to debug environment you can place break point right about the same place ?

这样整个流程就是非常顺畅
which leads to a great cohesive environment, all right

去年我也讨论了如何管理包
last year I also brought a package management

大概含糊带过去了 (开播了)
but I covered it in kind of hint wavy way I'm gonna play that

包管理从现在起一年后会有很大的改变
package management is something that in a year from now

我们会有一个很稳固的包管理框架
we're gonna have really robust package management tooling infrastructure

和一个富有包裹的社区
and a lot of packages in the community

现在只是刚刚介绍给大家
right now it's kind of still finding its foothold but

我们之后应该会看到更有意思的东西
we will be seeing some more things coming up soon I think

这个访谈是在Bower发布的前几个星期做的
yeah uh... was actually just a few weeks before the release of bower

Bower是一个包管理框架 这个项目我从一开始就一起做
bower is a package manager project that I have been involved in since the beginning

之后都发展的很不错
and it's really been taken off fantastic thing uh...

社区里面有非常多的贡献
the community in the registry have kind of blown up

来看一下现在的社区
this is a view of all the components that are in Bower

大概有两千两百个组件
and it's now up to a little over twenty-two hundred components available in the registry

你想做什么都可以在这找到
really great for you as a user and whenever you want to pull something

而且依赖已经附带
and it has dependencies it works great

对于整个生态环境也很不错
also great for the ecosystem because it means that

让大家可以流畅的合作
we're able to build upon each other's work in a lot more of a cohesive way

如果想了解更多关于Bower的事情
if you want to get up to speed on this there was a great presentation about bower

大家可以看看Dan Hoverd在Google IO大会上的演讲
down in google IO just two weeks ago dan hoverd showed off a lot of great stuff

中间也包括了Bower如何跟RequireJS yeoman以及grunt一起使用
including a really nice workflow using bower and requirejs also yeoman and grunt

这么棒的体验
to create this great experience of using package management is something

你可能觉得只有在其他语言里面才有
that you might expect from another language

现在终于来到JavaScript了
uh... but having it here inside of javascript for the front end

那好, 我们回到性能问题上面
alright wanna come back to performance

在一个Javascript大会上
and talking about performance at a javascript conference

肯定要讨论Javascript性能问题
uh... I might talk about javascript performance

但是要注意的是
but it's good to keep in mind that

Javascript不一定总是性能问题的根源
javascript is not kind of it's not always the best target

我们来看一下IE团队推出IE8时候的出的一份报告
these are slides from actually from the IE team back when they're released IE8

这东西虽然旧但是内容到现在还是很正确的
but this stuff is as true it was then as it is now

这里指出了在前100个访问最多的网站执行的过程中
up here we have they took a look at the top one hundred sites and saw where IE was spending its time

只有16%的时间是在Javascript上面
and just sixteen percent of its time was spent in javascript

剩下的在布局 渲染和格式化
rest of it in layout rendering formatting

包括Javascript较重的Ajax类网站比如Gmail, Google Maps等
and here for ajax heavy sites like javascript heavy sites like uh... gmail google maps

还是只有一部分
uh... just still a fraction

所以说Javascript只占总性能的一部分
so javascript is often a small fraction of the overall performance picture

如果你想了解如何让你的网站或者应用更快
so if you want to find out how to make your app your site fast

我建议你使用Chrome开发者工具的Timeline
I recommend you take a look at the timeline inside the Chrome DevTools so

这里演示一下
uh... I'm gonna show that to you now all right

这是一个信息图视差网站
so this is a kind of info graphic parallax site

效果做的很炫
it's pretty cool and I'm just gonna scroll through it so you get a chance to see what's going on

当我下拉的时候 这里有些橘色的圈圈
so as I scroll down I got this orange circle bubbly guy and these circles over here

然后这些圈圈有个很酷的物理爆炸动画
where is comes to some awesome physics explosion

下面有个视差的效果
and then come down here we have a parallax effect it's pretty cool I keep going down

继续下拉
and uh...keep going down

这些小白点慢慢扩大 布满整个页面
these white little dots form these grids and just take over the place

差不多这样
and that's about it, all right

回到顶部然后打开开发者工具
let's come back up and open up DevTools this time

拉到底部
and drag it down to the bottom

打开Timeline
open up the timeline

然后开始录制
and I'm gonna start recording

快捷键Command + D
just hit Command + D It's kind of quick

然后像刚刚一样继续下拉
and then I'm just gonna scroll through the same stuff dudu dudu

很酷的是
all right, what's really cool about that is

我们把这些东西整理起来像描述一样
we get for you the performance of the this page kind of in a narrative

开始很平淡
it starts off at the beginning it's pretty chill

然后到这里的绿色
and then we move on to the sections here where there's a lot of green

比较多
now this is up at the top

特别是这段圈圈铺满页面
where we are building out this kind of orange explosion of circles

绿色代表着绘制
and the green is time spent in paint

在这里整个页面的每一帧都是在绘制
and here we are painting the entire page on every single frame

这个占据挺多时间
it's taking a good amount of time

然后这里有很多黄色
then going into this section where there's a lot of yellow

黄色代表Javascript正在执行
and this is Javascript executing

这是当我们在阅览这块物理爆炸
that is when we're hitting uh... this little physics action right here

然后中间这里比较安静
that it's pretty quiet for the section in the middle we are hitting our target

一直在60帧/秒的帧预算之下
frame budget of 60 FPS mostly frames stay underneath that for the most part

再下来这里色彩缤纷
and then down at the bottom we kind of have this cacophony of colors

这些白色圈圈这里有很多东西发生
a lot of things happening as this kind of white things exploding

Javascript执行啊 绘制啊 还有布局啊
uh... both painting javascript and also a good amount of a purple layout here uh... is going on

Timeline可以大致的给出问题在哪里
but timeline is giving us this overall view of finding where our problems are

还有这是什么问题
of each section so we can deal with a bit more precise

这样我们可以更精准的调整这些性能问题
in how we adjust these performance issues

比如说我想更好的了解一下这一段
so if I wanna look into this section right here I'm gonna do that so let's see right here

的Javascript性能怎么样
uh... and I want to get a better idea of this javascript performance so let's do that

我去Profile 选择CPU Profile Command + E键
I'm gonna go over to profiles and collect a CPU profile Hit Command + E

这样就完成了
and it's probably good

然后到这里你应该都熟悉这些内容
and now if I come over here and uh... so this you should be used to

这个是总汇
kind of the aggregate view of everything that's going on

它告诉我以下是所有发生过的东西
and it is telling me kind of here are all the things that happened

但是它没有
information well what it's not doing

以一个流程的方式展现这个
it is giving it to me and kind of this view I could see frame by frame

把每一点发生的都显示出来
what happened bit by a bit

我们开发者工具团队觉得这里我们可以更好的展现出来
so this is we found we can address and also give you a better idea

特别是以一个图像的方式
as far as of visualization of this action

让我来介绍一下这个新的特性
so I want to show it to you a new feature

我们叫它火焰图
and it's called the flame chart

通过火焰图
uh...all right so here we have the flame chart

我们可以了解到事件的由来和经过
we're able to identify kind of at time scale across time how things are changing

在这个页面上其实挺一致的
in this case it's actually pretty consistent

每帧都是执行同样的Javascript
um... frame by frame looks like it's mostly executing the same javascript

如果不一样 它的颜色会变化
it would change color if not uh...

然后我们来详细看看这一个帧
and then it also drill in so this is one frame in particular

宽度代表时间
and in this case uh... width is time

高度代表调用堆栈 这里高度不是很重要
and height is call stacks so height's not too important but umm

如果我想细看几件事
if I wanna look in I can see a few things let's say uh... here

貌似D3在占领主要的时间
looks like D3 is kind of running the show

all my time to spend inside D3

这里有一些insertChild还有SVG插入
we got some insert child so it's doing some SVG inserting

然后好多quadTree View
uh... and then we have this quadtree view quadtree view quadtree view quadtree view insert child

还有插入新属性
but also the attribute function

设置SVG的新属性
just settings new attributes in the SVG at the end of the frame

这里总共执行了7毫秒
this is a seven milliseconds in this case which is a considerable amount of time

但是每帧都7毫秒其实也是比较长的时间
to happen every single frame

这个图像化可以让我更好的看到
but this visualization is giving me a great view as far as

什么东西在占用时间
what is soaking up this time

我应该先调整什么
and what should I address first

这就是火焰图
so that's the new flamed chart

Chrome Canary里面现在就有了
you can check it out in chrome canary today

还有一个Canvas Profiling Experiment
uh... we also have a canvas profiling experiment that I want to show to you now

演示是一个水族馆 打开开发者工具
so this here just this WebGL aquarium and Imma open up the DevTools

抓取一个Canvas Profile
and take a canvas profile so it's gonna record single canvas frame and

记录下每一帧里面的所有函数引用
it's recording all the calls that contributed to that frame

然后用下按键过
and poke through all the draw calls one-by-one and

每一个函数
just hitting the down arrow on the keyboard walking through

这里你可以看到每个场面是如何花出来的
how the scene was actually drawn so you can see

先有鱼 然后又这个鲨鱼
the fishes come in and the shark come in

还有球 和其他东西
the ball kind of come in and everything else

然后打开这些绘图函数
and then you open up the draw calls and

看看运用了哪些函数
see all the function calls that contributed to that draw

回到源代码
and go back to the sources

这个工具很酷
so this is cool but this is a platform

有了它 我们可以录制和播放Canvas和WebGL的动作
this is we are able to record and replay canvas and webGL action

但是这只是起步 之后如何变得更好取决于大家的回馈
uh... but really where we go from here is up to you and

你想看到哪些新特性
so please wrench in your feedback in kind of

大概我就介绍到这里
what you would like to see next as far as a canvas profiler

最后谈谈开发者工具针对性能方面开发的5个特性
all right I'm gonna wrap-up with five key DevTools performance features

第一个Continuous Repaint Mode
first up continuous repaint mode

如果你在Timeline里面 你看到绘图占用很多时间
if you're in the timeline you see a lot of time spent inside green painting

你可以打开Continuous Repaint Mode
then you probably wanna head over to continuous repaint mode

它会让浏览器不停的重新绘制页面
what it's gonna do is tell the browser

hey paint the page again and again and again

这样你就可以关闭元素和样式
and what this allows you to do is turn off elements and styles

了解是什么在占用页面绘制时间
and figure out what is contributing to the amount of time that it takes to paint the page

这样你就能
uh... and this is able to uh... to let you find out what's contributing

方便的调整这些更变
what you could adjust uh... it the changes so

但是这个工具不是用于了解绘制总汇
it's a it's a little tough to given aggregate view of

只是用于寻找哪些东西占用页面绘制时间
but you're able to find out exactly what's contributing there

然后有FPS Meter用于
and also the FPS Meter um... which gives you a good view of

观察你发送更新的频率
how fast you're sending updates to the screen

还有每秒的帧次数
so in addition to showing the frames per second

窗口里面也有GPU内存 最小和最大的帧次数 还有柱状图的总结
we also have min and max in that view and a histogram also the GPU memory

这样你可以看到当前页面使用的内存
so you can see how much memory is being used by the current tab

被分配了多少内存 如果有大量图片需要处理
how much is allocated if you have a lot of heavy imagery

那么你会发现GPU内存会一直清除
you're going to constantly evicting things out of the GPU memory

这样会导致GPU性能问题
which is probably gonna soak up a good amount of GPU performance

下一个Show Paint Rects 还有Layer Borders
uh... next up show paint rects and layer borders

这些也是开发者工具里面的设置
these are available as settings inside DevTools

也是用于发掘绘制问题
really great for identifying paint issues

可能在页面翻滚的时候 会重新绘制
so you might be repainting the entire page on every single scroll you don't wanna do that

这个工具能给你一个图形视野
and this is going to show you a visual view of that happening really fast

看起来这个DIV刚刚被重新绘制了
in this case uh... it looks like this div was just repainted

我们这里还有一个金色的边
and we have uh... a layer over here with the gold border

这个应该是一个卷动条
it's actually the scrollbar which

Chrome自动合成在页面上的
chrome actually composites right on top of the page

Object Allocation Tracker是一个崭新的工具
the object allocation trackers a brand new tool

用于内存分析
if you're doing a lot of memory analysis this is going to key for you so

你点击记录 然后它会继续对堆栈进行快照
you hit a do recording and it's gonna take continual heap snapshots over time

这样你可以分析某一部分中
that's how it identifies drillin on one specific part

分配的对象
to see what objects were allocated in that section

? 完全不知道该肿么翻译
and what they retain size and what they retaining tree which is great

甚至这些内存的来去
even try to identify where your memory is coming from and where it's going

最后一个工具Layout Thrashing
lastly layout thrashing back in uh...this timeline here

在这个时间表里面我们看到有许多时间花在布局上面
we see a good amount of time spent in layout

这里我们可以看到这是一个频繁更改DOM的应用
and here we're able to identify a bunch of stuff

have you had a DOM heavy web applications

你可能看到很多的重新布局
you might see something like this where you doing layout and layout and layout

但是没有绘制
and there's no paint you do it all this work

浏览器一直在不停的布局
and you're asking browser to do all this work

这是一个问题
and the users never seen a lot of it and this is a problem

开发者工具会显示这个黄图标
DevTools is gonna tell you that with this little icon

告诉你这里可能有性能问题
that there is possible performance bottleneck

同时也告诉你很多其他的信息
uh... this is also gonna give you a lot of other useful information too

比如重新布局的节点数 树大小 还有范围
the amount of nodes that need layouts the tree size the scope

还有一整个调用堆栈
and also a full call stack for why the layout was invalidated

why it was forced to conjoint as functions

为什么这些事情会发生
and find exactly why things were caused

这样你可以去调整 这里有很多的细节
maybe you're gonna need to change some things around so a lot of details

帮助你更好的了解如何提高应用的性能
and this is key to getting good performance on web applications

今天介绍了很多东西
okay that's a lot of stuff

最近Chrome开发者工具文档也新增了很多内容
the chrome tools documentation has recently got a bunch of new updates

包括今天讲的这些还有远程调试
covering these things and a bunch more including remote debugging

今天讲的所有特性都可以用于远程调试
everything I show today uh... is available as you remote debug your phone

这样的设置真的很强大 我建议大家都试一试
uh... so it's a really powerful setup and I encourage you to check that out

今天演示的所有东西在Canary里面都可以找到
uh... everything I showed today is also available in canary

有些还在Experiments里面需要开启
some of them behind experiments

但是我建议你去看看
but I encourage you to check out try things

让我知道你觉得有什么可以再改进
holler at me and tell me what you like what you don't like uh...

有反馈很好
and uh... it'd be good

最后 非常感谢大家
but thank you guys very much